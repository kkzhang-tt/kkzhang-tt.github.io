[
  
    {
      "title"    : "Bloom Filter",
      "title-lower"    : "bloom filter",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "",
      "tags"     : "",
      "url"      : "/2021/05/12/bloom_filter.html",
      "date"     : "2021-05-12 00:00:00 +0800",
      "content"     : "布隆过滤器是一种概率性的数据结构，主要用于判断一个元素是否出现过。对于检查一个元素是否出现过的简单实现可能只需要使用 Set。考虑一种场景，假设我们想检查一个用户是否是第一次访问我们的网站，那么使用 Set 的简单实现如下：class VisitorTracker:  def __init__(self):    self.visitors = set()      def add_visi..."
    } ,
  
    {
      "title"    : "Dense Index VS Sparse Index",
      "title-lower"    : "dense index vs sparse index",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "database",
      "tags"     : "",
      "url"      : "/database/2021/05/07/sparse_index.html",
      "date"     : "2021-05-07 00:00:00 +0800",
      "content"     : "对于数据库索引来说，其中一个性质是索引可以是密集的，也可以是稀疏的。关于索引类型的选择，需要根据数据库的特性进行权衡（trade-off）。假设存在以下数据库记录：该 table 存在四列，并且表中的行记录被分为四页，每页包含四条记录。我们指定 first_name 字段作为索引。密集索引从上图我们可以看到，对于密集索引来说，对于表中的每一个 first_name 行记录都会存在一个索引项。..."
    } ,
  
    {
      "title"    : "LSM Tree",
      "title-lower"    : "lsm tree",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "database",
      "tags"     : "",
      "url"      : "/database/2021/05/07/LSM_Tree.html",
      "date"     : "2021-05-07 00:00:00 +0800",
      "content"     : "介绍  写操作友好，同时兼顾查询效率  多用于 key-value 型 or 日志型数据库  LSM Tree 性能高的原因：采用顺序读写，避免随机读写  不管是 Disk 还是 Memory，顺序读写都能比随机读写有较大的性能提好（甚至是几个数量级）结构维护 SSTable 持久化到磁盘  每个 SSTable 包含多个 Segment  每个 Segment 中有序存储 key-valu..."
    } ,
  
    {
      "title"    : "编程珠玑（二）",
      "title-lower"    : "编程珠玑（二）",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "algrithom",
      "tags"     : "",
      "url"      : "/algrithom/2021/04/11/programming_pearls_2.html",
      "date"     : "2021-04-11 00:00:00 +0800",
      "content"     : "三个问题  给定一个最多包含 40 亿个随机排列的 32 位整数的文件，找出一个不在文件中的 32 位整数（整个文件可能有多个不存在的整数，但是只需要找到一个）。如果给定内存足够，如何处理；如果内存限定在几百字节，但是磁盘容量没有限制，如何处理？  将一个 n 元一维向量向左旋转 i 个位置。例如，向量 abcdefgh 中 n = 8, i = 3，那么旋转后的向量为 defghabc。 ..."
    } ,
  
    {
      "title"    : "编程珠玑（一）",
      "title-lower"    : "编程珠玑（一）",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "algrithom",
      "tags"     : "",
      "url"      : "/algrithom/2021/04/11/programming_pearls_1.html",
      "date"     : "2021-04-11 00:00:00 +0800",
      "content"     : "问题引入输入：一个最多包含 n 个正整数的文件，每个数都小于 n，其中 n = 10^7。并且输入文件中的正整数没有重复数据，数据之间没有任何关联。输出：按照升序排列输出整数列表。约束：最多有 1MB 内存，但是有充足的磁盘空间使用。要求程序运行时间最多有几分钟。程序设计磁盘文件归并排序通过优化基于磁盘的归并排序实现；这种做法需要生成中间文件，并且程序运行时要多次读取中间文件多趟排序文件中的..."
    } 
  
]